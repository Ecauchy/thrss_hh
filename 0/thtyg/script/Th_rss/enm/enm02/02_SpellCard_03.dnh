////#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage2　討鬼「菅原式縮地法」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm02_setting.dnh"
	
	let enm;
	let spl;
	
	//　敵テクスチャID
	let tex;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 70, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip(64,128,64,64);
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			Concentration01_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain(enm);
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 2, 5 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Default" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		tex = EnemyDisplay01(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
/* to be translated */			spell_text = "討鬼「菅原式縮地法」";
		}
		case( "Hard", "Lunatic" ){
/* to be translated */			spell_text = "転進「イリュージョンドライブ」";
		}
		case( "OverDrive" ){
/* to be translated */			spell_text = "転進「イリュージョンドライブ」";
		}
		
		SpellCounter( GetDifficult, 2, 5 );
		let sct = GetSpellCounter( GetDifficult, 2, 5 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_02(ID);
		SpellCardMagicTimer(ID);
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let angle	= 0;
		let i		= 0;
		
		//　way数
		let lp		= [ 0, 0 ];
		//　ショットタイプ
		let type	= 0;
		//　弾画像
		let shote	= [ BGW_YELLOW_20, ADD_BGW_AQUA_28 ];

		//　攻撃ループタイミング
		let l_wt = 220;
		
		alternative( GetDifficult )
		case( "Easy" ){
			lp		= [ 2, 3 ];
		}
		case( "Normal" ){
			lp		= [ 3, 5 ];
		}
		case( "Hard" ){
			lp		= [ 5, 7 ];
			shote	= [ BGW_BLUE_20, ADD_BGW_AQUA_28 ];
			l_wt = 160;
		}
		case( "Lunatic" ){
			lp		= [ 5, 9 ];
			shote	= [ BGW_BLUE_20, ADD_BGW_AQUA_28 ];
			l_wt = 120;
		}
		case( "OverDrive" ){
			lp		= [ 5, 11 ];
		}
		
		while( !Obj_IsDeleted( ID ) ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			//　パワー溜めから初期化
			if( count == l_wt - 100 ){
				EnemyMove_Teleport( ID, tex, [ CenX + rand(-128,128), CenY-128 ] );
				SetAreaCommonData("anime", "spa", false );
				if( type == 2 ){ count+=70; }
			}
			if( count == l_wt ){
				frame = 0;
				count = 0;
				angle = 0;
				
				type++;
				if( type > 2 ){
					type = 0;
				}
			}
			
			alternative( type )
			case( 0 ){
				if( frame == 0 ){
					ShotPattern01( ID, gpos, lp[0] );
					SetAreaCommonData("anime", "spa", true );
				}
			}
			case( 2 ){
				if( frame == 0 ){
					ShotPattern02( ID, gpos, round(lp[0]/2), shote[0] );
					SetAreaCommonData("anime", "spa", true );
				}
			}
			case( 1 ){
				if( frame == 0 ){
					let rgb_array = [
						[0,255,255],
						[255,255,0],
					];
					ascent( i in 0..5 ){
						DisCharge_Thnder01( enm, 0+i*32, [0,-32], rgb_array, 16 + i*4 );
					}
					ascent( i in 0..(lp[1]) ){
						CreateThunderShot( gpos, i*(360/lp[1]), 12, 0, 10, shote[1], 1 );
					}
					SetAreaCommonData("anime", "spa", true );
				}
				if( frame > 0 && frame%8 == 0 && frame < 60 ){
					let defaultA = rand(0,360);
					let av = rand(-1,1);
					ascent( i in 0..( round(lp[0]/2) ) ){
						CreateThunderLaserC( gpos, rand(2,4), defaultA + i*(360/lp[0]), rand(0.02,0.04), 10, -av, 32, 24 );
					}
					ObjSound_Play( CreateShotSE[11] );
				}
			}
			
			frame++;
			if( frame >= lp[1]*3 ){ count++; }
			
			yield;
		}
	}
	
	
	
	
	//　ショットパターン01　フラクタル
	task ShotPattern01( CallID, gpos, lp ){
		let frame	= 0;
		let angle	= 0;
		let move1	= 0;
		let moveA	= 0;
		let move2	= 0;
		let moveB	= 0;
		
		while( move2 < 1 && !Obj_IsDeleted(CallID) ){
			
			move1 = 1 * sin( moveA );
			move2 = 1 * sin( moveB );
			
			if( frame%4 == 0 ){
				ascent( i in 0..( lp ) ){
					let spos = [
						gpos[0] + (move1*96 - move2*96) * cos( 90 + i*(360/lp) + angle ),
						gpos[1] + (move1*96 - move2*96) * sin( 90 + i*(360/lp) + angle ),
					];
					
					let sht = CreateShotA2( spos[0], spos[1], 0, 90 + i*(360/lp) - angle, 0, 0, ADD_BGW_PURPLE_18, 8 );
					NotifyEventAll( EV_USER + 40, [ sht, 8 ] );
					ObjMove_AddPatternA3( sht, 180 - frame, NO_CHANGE, NO_CHANGE, 0.04, 0 - angle/10, 10, ADD_BGW_PURPLE_11 );
					ObjMove_AddPatternA3( sht, 210 - frame/2, NO_CHANGE, NO_CHANGE, -0.1, 0, 1.2, ADD_BGW_RED_11 );
					PlayShotSE( sht, 180 - frame, 2 );
					PlayShotSE( sht, 210 - frame/2, 1 );
				}
				
				ObjSound_Play( CreateShotSE[0] );
				
				if( move1 < 1 ){ moveA += 5; }
				else if( move2 < 1 ){ moveB += 5; }
				angle += 1;
			}
			
			frame++;
			
			yield;
		}
	}
	
	//　ショットパターン02　自機狙い
	task ShotPattern02( CallID, gpos, lp, shote ){
		let frame	= 0;
		let angle	= GetAngleToPlayer(CallID);
		let move1	= 0;
		let moveA	= 0;
		let move2	= 0;
		let moveB	= 0;
		
		while( move2 < 1 && !Obj_IsDeleted(CallID) ){
			
			move1 = 1 * sin( moveA );
			move2 = 1 * sin( moveB );
			
			if( frame%4 == 0 ){
				ascent( i in 0..( lp ) ){
					let sht1 = CreateShotA2( gpos[0], gpos[1], 4, angle + i*(360/lp) + move1*64 - move2*180, -0.1, 1.6, shote, 8 );
					let sht2 = CreateShotA2( gpos[0], gpos[1], 4, angle + i*(360/lp) - move1*64 + move2*180, -0.1, 1.6, shote, 8 );
					NotifyEventAll( EV_USER + 40, [ sht1, 8 ] );
					NotifyEventAll( EV_USER + 40, [ sht2, 8 ] );
				}
				
				ObjSound_Play( CreateShotSE[0] );
				
				if( move1 < 1 ){ moveA += 5; }
				else if( move2 < 1 ){ moveB += 5; }
				angle += 1;
			}
			
			frame++;
			
			yield;
		}
	}
	
	//　雷っぽいショット
	function CreateThunderShot( pos, angle, speed, acc, mx, shote, type ){
		let sht = CreateShotA2( pos[0], pos[1], speed, angle, acc, mx, shote, 0 );
		NotifyEventAll( EV_USER + 40, [ sht, 0 ] );
		
		ObjShot_SetIntersectionEnable( sht, false );
		Obj_SetVisible( sht, false );
		
		ShotUpdate( sht, shote, type );
		
		return sht;
	}
	
	task ShotUpdate( ObjID, shote, type ){
		let angle = ObjMove_GetAngle( ObjID );
		let frame = 0;
		let count = truncate( rand(0,2) );
		
		let ft = truncate( rand(4,8) );
		
		while( !Obj_IsDeleted(ObjID) ){
			let gpos = [ ObjMove_GetX(ObjID), ObjMove_GetY(ObjID) ];
			
			if( frame%ft == 0 ){
				if( count%2 == 0 ){
					ObjMove_SetAngle( ObjID, angle - 45 );
				}
				else{
					ObjMove_SetAngle( ObjID, angle + 45 );
				}
				count++;
			}
			
			if( frame%1 == 0 ){
				if( type == 0 ){
					let sht = CreateShotA2( gpos[0], gpos[1], 0, ObjMove_GetAngle( ObjID ), 0, 0, shote, 32 );
					NotifyEventAll( EV_USER + 40, [ sht, 32 ] );
					ShotDelete( sht, 120 );
				}
				else{
					let sht = CreateShotA2( gpos[0], gpos[1], 0.2, angle, 0, 0, shote, 32 );
					NotifyEventAll( EV_USER + 40, [ sht, 32 ] );
					ShotDelete( sht, 120 );
				}
				ObjSound_Play( CreateShotSE[1] );
			}
			
			frame++;
			
			yield;
		}
	}
	
	//　n フレーム後に弾削除
	task ShotDelete( ObjID, long ){
		Obj_SetValue( ObjID, "Item_Off", true );
		loop( long ){ yield; }
		ObjShot_ToItem( ObjID );
	}
	
	//　n フレーム後に効果音鳴らす
	task PlayShotSE( CallID, long, array_num ){
		loop( long ){
			if( Obj_IsDeleted(CallID) ){ break; }
			yield;
		}
		ObjSound_Play( CreateShotSE[array_num] );
	}
	
	//　テレポート移動
	task EnemyMove_Teleport( CallID, TexID, pos ){
		let sca		= 0.9;
		let sca1	= 0;
		let scaA	= 0;
		
		ObjSound_Play( UtilitySE[10] );
		
		ObjRender_SetColor(TexID, 64, 0, 128 );
		
		while( sca1 < 1 && !Obj_IsDeleted(CallID) ){
			sca1 = 1 * sin(scaA);
			ObjRender_SetScaleXYZ(TexID, sca - sca1*sca/1.2, sca + sca1*sca*2, 0 );
			scaA += 15;
			yield;
		}
		sca1 = 0;
		scaA = 0;
		while( sca1 < 1 && !Obj_IsDeleted(CallID) ){
			sca1 = 1 * sin(scaA);
			ObjRender_SetScaleXYZ(TexID, sca1*sca*4, sca - sca1*sca/1.2, 0 );
			scaA += 15;
			yield;
		}
		sca1 = 0;
		scaA = 0;
		while( sca1 < 1 && !Obj_IsDeleted(CallID) ){
			sca1 = 1 * sin( scaA );
			ObjRender_SetScaleXYZ(TexID, sca - sca1*sca, sca1*sca*2, 0 );
			scaA += 15;
			yield;
		}
		sca1 = 0;
		scaA = 0;
		ObjMove_SetPosition(CallID, pos[0], pos[1] );
		ObjRender_SetColor(TexID, 255, 255, 255 );
		while( sca1 < 1 && !Obj_IsDeleted(CallID) ){
			sca1 = 1 * sin( scaA );
			ObjRender_SetScaleXYZ(TexID, sca1*sca, sca*2 - sca1*sca, 0 );
			scaA += 10;
			yield;
		}
	}
