
//　流れる雲
task CreateCloudPh( pos, movep, sca, long, rgb_array, alpha ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture(ID, world_effect_texture_path[0] );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI(ID, world_layer );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetAngleZ(ID, rand(0,360) );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect(ID, 0, 0, 256, 256 );
	ObjSprite3D_SetBillboard(ID, true );
	
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha(ID, move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 1;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		if( !OnSpell ){
			frame++;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha(ID, alpha - move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 1;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	Obj_Delete( ID );
}

//　瞬く光
task CreateFlashLightPh( pos, movep, sca, alpha, long, rgb_array ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= rand(0,360);
	let flash		= rand(2,64);
	
	//　点滅の速度
	let rc			= truncate( rand(2,4) );
	
	ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture(ID, effect_path );
	ObjRender_SetBlendType(ID, BLEND_SUBTRACT );
	Obj_SetRenderPriorityI(ID, world_layer+1 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect(ID, 196, 0, 256, 64 );
	ObjSprite3D_SetBillboard(ID, true );
	
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, (move1*(alpha/2)) - (move1*(alpha/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, alpha/2 - alpha/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		let fade = alpha - move1*alpha;
		
		ObjRender_SetAlpha(ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	Obj_Delete( ID );
}

//　星っぽいやつ
task CreateConstellationPh( pos ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 3 ){ return; }
	
	let IsActive	= GetAreaCommonData("StageTrance", "active", [true,true,true,true] );
	let StageTrance	= GetAreaCommonData("StageTrance", "trance", [false,false,false,false] );
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let obj			= [
		ObjPrim_Create(OBJ_SPRITE_3D),
		ObjPrim_Create(OBJ_SPRITE_3D),
	];
	let count		= 0;
	let move1		= 0;
	let moveA		= 0;
	
	let kaku		= 28;
	let pc			= 0;
	let i			= 0;
	let j			= 1;
	
	//　Ｎ角形＋１＊２が頂点の数になる
	let ten			= ( kaku + 1 ) * 2;
	//　画像rect
	let _rect		= 0;
	
	ascent( i in 0..( length(obj) ) ){
		ObjRender_SetPosition(obj[i], pos[0], pos[1], pos[2] );
		ObjPrim_SetPrimitiveType(obj[i], PRIMITIVE_TRIANGLESTRIP );
		ObjPrim_SetTexture(obj[i], GetCurrentScriptDirectory() ~ "./../img/effect/constellation01a.png" );
		ObjRender_SetBlendType(obj[i], BLEND_SUBTRACT );
		Obj_SetRenderPriorityI(obj[i], world_layer );
		ObjPrim_SetVertexCount(obj[i], ten );
		ObjSprite3D_SetBillboard(obj[i], true );
		ObjRender_SetFogEnable(obj[i], false );
	}
	
	let rgb_array	= [];
	let alpha		= [];
	let ra			= [];
	ascent( i in 0..( ten ) ){
		rgb_array	= rgb_array ~ [ [rand(0,255),rand(0,255),rand(0,255)] ];
		alpha		= alpha ~ [ rand(128,255) ];
		ra			= ra ~ [ rand(-32,32) ];
	}
	i = 0;
	
	while( IsActive[0] && GetAreaCommonData( "System", "Stage_Index", 0 ) == 8 ){
		IsActive	= GetAreaCommonData("StageTrance", "active", [true,true,true,true] );
		StageTrance	= GetAreaCommonData("StageTrance", "trance", [false,false,false,false] );
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		if( !OnSpell ){
			loop( ten/2 ){
				let dis = [ 128, 768 ];
				let spin = count/-8;
				
				ascent( let i2 in 0..( length(obj) ) ){
					ObjPrim_SetVertexPosition(obj[i2], i, (dis[0]+i2*128) * cos(pc+spin), (dis[0]+i2*128) * sin(pc+spin), 512 );
					ObjPrim_SetVertexPosition(obj[i2], j, (dis[1]+i2*128) * cos(pc+spin), (dis[1]+i2*128) * sin(pc+spin), 0 );
					ObjPrim_SetVertexUVT(obj[i2], i, 0 + _rect + count*i2, 0 );
					ObjPrim_SetVertexUVT(obj[i2], j, 0 + _rect + count*i2, 1024 );
					ObjPrim_SetVertexAlpha(obj[i2], i, (move1*alpha[0]) + (move1*16) * cos( count*ra[0] ) );
					ObjPrim_SetVertexAlpha(obj[i2], j, 0 );
					ObjPrim_SetVertexColor(obj[i2], i, rgb_array[i][0], rgb_array[i][1], rgb_array[i][2] );
					ObjPrim_SetVertexColor(obj[i2], j, rgb_array[j][0], rgb_array[j][1], rgb_array[j][2] );
				}
				
				pc			+= 360/kaku;
				i			+= 2;
				j			+= 2;
				_rect		+= 73;
			}
			pc			= 0;
			i			= 0;
			j			= 1;
			_rect		= 0;
		}
		
		count++;
		if( move1 < 1 ){ moveA += 0.1; }
		
		yield;
	}
	ascent( i in 0..( length(obj) ) ){
		Obj_Delete( obj[i] );
	}
}

//　オーロラ
task CreateAuroraPh(pos){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 3 ){ return; }
	
	let IsActive	= GetAreaCommonData("StageTrance", "active", [true,true,true,true] );
	let StageTrance	= GetAreaCommonData("StageTrance", "trance", [false,false,false,false] );
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let obj			= ObjPrim_Create(OBJ_SPRITE_3D);
	let count		= 0;
	let move1		= 0;
	let moveA		= 0;
	
	let ang			= rand(0,360);
	let kaku		= 48;
	let pc			= 0;
	let i			= 0;
	let j			= 1;
	
	//　Ｎ角形＋１＊２が頂点の数になる
	let ten			= ( kaku + 1 ) * 2;
	//　画像rect
	let _rect		= 0;
	//　円の太さ
	let wight		= 32;
	//　回転の早さ
	let ang_plus	= 6;
	
	ObjRender_SetPosition(obj, pos[0], pos[1], pos[2] );
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory() ~ "./../img/effect/aurora01a.png" );
	ObjRender_SetBlendType(obj, BLEND_SUBTRACT );
	Obj_SetRenderPriorityI(obj, world_layer );
	ObjPrim_SetVertexCount(obj, ten );
	ObjRender_SetAngleXYZ(obj, 90, 0, 0 );
	ObjSprite3D_SetBillboard(obj, true );
	ObjRender_SetFogEnable(obj, false );
	
	let move	= [];
	let alpha	= [];
	let color	= [];
	ascent( i in 0..( ten ) ){
		move	= move ~ [0];
		alpha	= alpha ~ [0];
		color	= color ~ [ [0,0,0] ];
	}
	ascent( i in 0..( ten ) ){
		move[i]		= rand(-128,128);
		alpha[i]	= rand(128,255);
		color[i]	= [ 255, 255, 255 ];
	}
	i = 0;
	
	//　下の処理あるから要らんけど、一応
	move[0]		= move[ length(move)-1 ];
	color[0]	= color[ length(color)-1 ];
	
	//　最初の頂点と最後の頂点はくっついてる様でくっついてないので、a値を 0 にしてごまかす
	alpha[0]	= 0;
	alpha[ length(alpha)-1 ] = 0;
	
	//　オーロラ下方向への変化量　カメラの関係でz軸
	let z2 = 640 + rand(0,256);
	
	while( IsActive[0] && GetAreaCommonData( "System", "Stage_Index", 0 ) == 8 ){
		IsActive	= GetAreaCommonData("StageTrance", "active", [true,true,true,true] );
		StageTrance	= GetAreaCommonData("StageTrance", "trance", [false,false,false,false] );
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetAngleXYZ(obj, 90 + 16*sin( count/8 ), 0, 0 );
		
		if( !OnSpell ){
			let ct = 0;
			
			loop( ten/2 ){
				let dis = [
					[ 1024+32*sin(count), 256+32*cos(count), 0 ],
					[ (1024+128)+32*cos(count), (256+128)+32*sin(count), z2 ],
				];
				
				ObjPrim_SetVertexPosition(obj, i, dis[0][0] * cos(pc), dis[0][1] * sin(pc), dis[0][2] );
				ObjPrim_SetVertexPosition(obj, j, dis[1][0] * cos(pc), dis[1][1] * sin(pc), dis[1][2] + move[ct] * sin( count*(move[ct]/64) ) );
				ObjPrim_SetVertexUVT(obj, i, 0 + _rect - count, 0 );
				ObjPrim_SetVertexUVT(obj, j, 0 + _rect - count, 512 );
				ObjPrim_SetVertexAlpha(obj, i, 0 );
				ObjPrim_SetVertexAlpha(obj, j, move1*alpha[ct] + 64*sin( count*(move[ct]/32) ) );
				ObjPrim_SetVertexColor(obj, i, color[ct][0] + 127*sin(count*2), color[ct][1], color[ct][2] );
				ObjPrim_SetVertexColor(obj, j, color[ct*2][0] + 127*sin(count*2), color[ct*2][1], color[ct*2][2] );
				
				pc			+= 360/kaku;
				i			+= 2;
				j			+= 2;
				_rect		+= 128;
				ct++;
			}
			pc			= 0;
			i			= 0;
			j			= 1;
			_rect		= 0;
			
			count++;
			if( move1 < 1 ){ moveA += 0.1; }
		}
		
		yield;
	}
	Obj_Delete( obj );
}
