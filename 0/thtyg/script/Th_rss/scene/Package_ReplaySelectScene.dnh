//※sample 引用 若干加工
	let csd				= GetCurrentScriptDirectory();
	
@Initialize{
	SetAutoDeleteObject(true);
	
	TBackground();
	TReplaySelectScene();
	
	SetScriptResult("");
}

@MainLoop{
	yield;
}

@Finalize{
	PlaySEsP(csd~"../se/menucancel.ogg");
}

task PlaySEsP(se){
	let sid		= ObjSound_Create;
	let se_vol	= GetAreaCommonData("Option","SE_Volume",100);

	se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
	
	ObjSound_Load(sid,se);
	ObjSound_SetVolumeRate(sid,se_vol);
	ObjSound_SetLoopEnable(sid,false);
	ObjSound_Play(sid);
	loop(180){yield;}
	Obj_Delete(sid);
}

task TBackground{
	let objImage	= ObjPrim_Create(OBJ_SPRITE_2D);
	let objText		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd 		= GetCurrentScriptDirectory();
	let efrag		= GetAreaCommonData("System", "title_end", false );
	let alpha1		= 0;
	let alphaA		= 0;
	let flg			= 0;
	let ctr			= 0;
	let i			= 0;
	
	//　背景
	ObjPrim_SetTexture(objImage, csd ~ "../img/title/Title00_d.png" );
	Obj_SetRenderPriorityI(objImage, 33 );
	ObjSprite2D_SetSourceRect(objImage, 0, 0, 640, 480 );
	ObjSprite2D_SetDestRect(objImage, 0, 0, 640, 480 );
	ObjRender_SetColor(objImage, 64, 64, 64 );
	ObjRender_SetAlpha(objImage, alpha1*255 );
	
	//　項目名
	ObjRender_SetPosition(objText, 320, 48 - 64 + alpha1*64, 0 );
	ObjPrim_SetTexture(objText, csd ~ "../img/title/sl01.png" );
	Obj_SetRenderPriorityI(objText, 35 );
	ObjRender_SetScaleXYZ(objText, 0.56, 0.56, 0 );
	ObjSprite2D_SetSourceRect(objText, 512, 512, 1024, 768 );
	ObjSprite2D_SetDestCenter(objText);
	ObjRender_SetAlpha(objText, alpha1*255 );
	
	while( !efrag ){
		efrag = GetAreaCommonData("System", "title_end", false );
		
		alpha1 = 1 * sin( alphaA );
		
		ObjRender_SetPosition(objText, 320, 48 - 64 + alpha1*64, 0 );
		
		ObjRender_SetAlpha(objImage, alpha1*255 );
		ObjRender_SetAlpha(objText, alpha1*255 );
		
		if( ctr > 1 && GetVirtualKeyState(VK_CANCEL) == KEY_PUSH ){
			ctr = 0;
			if( GetAreaCommonData("Temporary", "RollBack", false ) ){
				//　ロールバック用フラグが作成されているかチェック
				//　ロールバックされるとフラグは元に戻る
				//　リプレイから出る時のみ設定ロールバック
				RollBackOptionSave();
			}
			break;
		}
		
		ctr++;
		if( alpha1 < 1 ){ alphaA += 5; }
		
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	while( !efrag && alpha1 < 1 ){
		efrag = GetAreaCommonData("System", "title_end", false );
		
		alpha1 = 1 * sin( alphaA );
		
		ObjRender_SetPosition(objText, 320, 48 - alpha1*64, 0 );
		
		ObjRender_SetAlpha(objImage, 255 - alpha1*255 );
		ObjRender_SetAlpha(objText, 255 - alpha1*255 );
		
		alphaA += 5;
		
		yield;
	}
	Obj_Delete( objImage );
	Obj_Delete( objText );
	SetAreaCommonData("System", "select", 0 );
	SetAreaCommonData("System", "select2", 0 );
	CloseScript( GetOwnScriptID() );
}

//----------------------------------------------------
// リプレイ選択
//----------------------------------------------------
task TReplaySelectScene
{
	LoadReplayList();
	let listValidReplayIndex = GetValidReplayIndices();

	let cursorY = 0;
	let page = 0;
	let countMaxItem = length(listValidReplayIndex);
	let countItemPerPage = 20;
	let pageMax = trunc((countMaxItem - 1) / countItemPerPage);
	pageMax = max(pageMax, 0);
	let lastPageMaxCursorY = trunc(countMaxItem % countItemPerPage);
	if(countMaxItem % countItemPerPage == 0)
	{
		lastPageMaxCursorY = countItemPerPage;
	}

	task TMenuItem(let itemY)
	{
		let objText = CreateTextObject(32, 96 + 16 * itemY, 16, "");
		ObjText_SetFontBorderWidth(objText, 1);
		let objSelect = CreateTextObject(32, 96 + 16 * itemY, 16, "");
		ObjText_SetFontBorderWidth(objSelect, 1);
		ObjText_SetFontColorTop(objSelect, 255, 255, 255);
		ObjText_SetFontColorBottom(objSelect, 255, 255, 255);

		let oldPage = -1;
		loop
		{
			if(page != oldPage)
			{
				let text = "";
				let indexList = page * countItemPerPage + itemY;
				if(indexList < countMaxItem)
				{
					let indexReplay = listValidReplayIndex[indexList];
					if(IsValidReplayIndex(indexReplay))
					{
						//　リプレイインデックス
						let indexReplay = listValidReplayIndex[indexList];
						//　SAVE時に一緒に保存した情報を "/" で情報切り分け
						let rpy_comment = SplitString( GetReplayInfo(indexReplay, REPLAY_COMMENT) ,"/" );
						
						alternative( rpy_comment[1] )
						case( "Story" ){ rpy_comment[1] = "StoryMode"; }
						case( "Stage" ){ rpy_comment[1] = "StagePractice"; }
						case( "Spell" ){ rpy_comment[1] = "SpellPractice"; }
						
						text = rtos("00", indexReplay) ~ " ";
						text = text ~ vtos("-8s", GetReplayInfo(indexReplay, REPLAY_USER_NAME)) ~ " ";
						text = text ~ rpy_comment[1] ~ " ";
						text = text ~ vtos("-8s", GetReplayInfo(indexReplay, REPLAY_PLAYER_NAME)) ~ " ";
						text = text ~ vtos("03.2f", GetReplayInfo(indexReplay, REPLAY_FPS_AVERAGE)) ~ "fps ";
						text = text ~ GetReplayInfo(indexReplay, REPLAY_DATE_TIME) ~ " ";
					}
				}

				ObjText_SetText(objText, text);
				ObjText_SetText(objSelect, text);
				oldPage = page;
			}
			
			if(page == pageMax && itemY >= lastPageMaxCursorY)
			{
				Obj_SetVisible(objText, false);
				Obj_SetVisible(objSelect, false);
			}
			else
			{
				Obj_SetVisible(objText, true);
				Obj_SetVisible(objSelect, itemY == cursorY);
			}

			yield;
		}
		Obj_Delete(objText);
		Obj_Delete(objSelect);
	}
	
	//　リプレイメニュー作成
	ascent(let iItem in 0 .. countItemPerPage)
	{
		TMenuItem(iItem);
	}
	
	//キー状態がリセットされるまで待機
	while(GetVirtualKeyState(VK_OK) != KEY_FREE){yield;}
	
	//キー処理
	let frameKeyHold = 0;//キー押しっぱなしフレーム数
	loop
	{
		//決定
		if(GetVirtualKeyState(VK_OK) == KEY_PUSH && countMaxItem!=0)
		{
			
			//　ロールバック用に設定をセーブ
			BeforOptionSave();
			
			SetAreaCommonData("System","title_end",true);
			let indexList = page * countItemPerPage + cursorY;
			if(indexList < countMaxItem) 
			{
				//　リプレイインデックス
				let indexReplay	= listValidReplayIndex[indexList];
				//　リプレイへのパス
				let pathReplay	= GetReplayInfo(indexReplay, REPLAY_FILE_PATH );
				//　SAVE時に一緒に保存した情報を "/" で情報切り分け
				let rpy_comment	= SplitString( GetReplayInfo(indexReplay, REPLAY_COMMENT) ,"/" );
				
				SetAreaCommonData("System", "ReplayPath", pathReplay );
				
				//　切り分けたデータの代入
				SetAreaCommonData("System", "Difficulty", rpy_comment[0] );
				SetAreaCommonData("System", "PlayMode", rpy_comment[1] );
				SetAreaCommonData("System", "stg_ST", ator(rpy_comment[2]) );
				SetAreaCommonData("System", "spell_ST", ator(rpy_comment[3]) );
				SetAreaCommonData("Option", "Effect_Cut", ator(rpy_comment[4]) );
				SetAreaCommonData("Option", "AutoBomb", ator(rpy_comment[5]) );
				SetAreaCommonData("Option", "StrongStyle", ator(rpy_comment[6]) );
				
				//　そのリプレイのハイスコア読み込み
				SetAreaCommonData("Trance", "High_Score", GetReplayInfo(indexReplay, REPLAY_TOTAL_SCORE) );
				
				if( rpy_comment[0] == "Extra" ){
					//　難易度がExtraだったらインデックス変更
					SetAreaCommonData( "System", "Stage_Index", 7 );
				}
				else if( rpy_comment[0] == "Phantasm" ){
					//　難易度がPhantasmだったらインデックス変更
					SetAreaCommonData( "System", "Stage_Index", 8 );
				}
				
				SetScriptResult( pathReplay );
				CloseScript( GetOwnScriptID() );
				break;
			}
		}
		
		//カーソル移動
		if(GetVirtualKeyState(VK_UP) == KEY_PUSH || GetVirtualKeyState(VK_UP) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_UP) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 5 == 0)))
			{
				cursorY--;
				PlaySEsP( csd ~ "./../se/menuselect.ogg" );
			}
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH || GetVirtualKeyState(VK_DOWN) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 5 == 0)))
			{
				cursorY++;
				PlaySEsP( csd ~ "./../se/menuselect.ogg" );
			}
		}
		else if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 5 == 0)))
			{
				page--;
				PlaySEsP( csd ~ "./../se/menuselect.ogg" );
			}
		}
		else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 5 == 0)))
			{
				page++;
				PlaySEsP( csd ~ "./../se/menuselect.ogg" );
			}
		}
		else
		{
			frameKeyHold = 0;
		}

		if(page < 0)
		{
			page = pageMax;
		}
		else if(page > pageMax)
		{
			page = 0;
		}

		if(page != pageMax)
		{
			if(cursorY < 0)
			{
				cursorY = countItemPerPage - 1;
			}
			else if(cursorY >= countItemPerPage)
			{
				cursorY = 0;
			}
		}
		else
		{
			if(cursorY < 0)
			{
				cursorY = lastPageMaxCursorY - 1;
			}
			else if(cursorY >= lastPageMaxCursorY)
			{
				cursorY = 0;
			}
		}

		yield;
	}
}


//　直前の設定を保存する
task BeforOptionSave(){
	let BGM		= GetAreaCommonData("Option", "BGM_Volume", 99999 );
	let SE		= GetAreaCommonData("Option", "SE_Volume", 99999 );
	let PSvol	= GetAreaCommonData("Option", "PlayerShot_Volume", 0 );
	let SHvol	= GetAreaCommonData("Option", "ShotHit_Volume", 0 );
	let PL		= GetAreaCommonData("Option", "Player", 8 );
	let EC		= GetAreaCommonData("Option", "Effect_Cut", 3 );
	let AUTO_B	= GetAreaCommonData("Option", "AutoBomb", 0 );
	let S_Style	= GetAreaCommonData("Option", "StrongStyle", 0 );
	
	CreateCommonDataArea("Temporary");
	SetAreaCommonData("Temporary", "RollBack", true );
	SetAreaCommonData("Temporary", "BGM_Volume", BGM );
	SetAreaCommonData("Temporary", "SE_Volume", SE );
	SetAreaCommonData("Temporary", "PlayerShot_Volume", PSvol );
	SetAreaCommonData("Temporary", "ShotHit_Volume", SHvol );
	SetAreaCommonData("Temporary", "Player", PL );
	SetAreaCommonData("Temporary", "Effect_Cut", EC );
	SetAreaCommonData("Temporary", "AutoBomb", AUTO_B );
	SetAreaCommonData("Temporary", "StrongStyle", S_Style );
}


//　設定をロールバックする
task RollBackOptionSave(){
	let BGM		= GetAreaCommonData("Temporary", "BGM_Volume", 99999 );
	let SE		= GetAreaCommonData("Temporary", "SE_Volume", 99999 );
	let PSvol	= GetAreaCommonData("Temporary", "PlayerShot_Volume", 0 );
	let SHvol	= GetAreaCommonData("Temporary", "ShotHit_Volume", 0 );
	let PL		= GetAreaCommonData("Temporary", "Player", 8 );
	let EC		= GetAreaCommonData("Temporary", "Effect_Cut", 3 );
	let AUTO_B	= GetAreaCommonData("Temporary", "AutoBomb", 0 );
	let S_Style	= GetAreaCommonData("Temporary", "StrongStyle", 0 );
	
	SetAreaCommonData("Temporary", "RollBack", false );
	SetAreaCommonData("Option", "BGM_Volume", BGM );
	SetAreaCommonData("Option", "SE_Volume", SE );
	SetAreaCommonData("Option", "PlayerShot_Volume", PSvol );
	SetAreaCommonData("Option", "ShotHit_Volume", SHvol );
	SetAreaCommonData("Option", "Player", PL );
	SetAreaCommonData("Option", "Effect_Cut", EC );
	SetAreaCommonData("Option", "AutoBomb", AUTO_B );
	SetAreaCommonData("Option", "StrongStyle", S_Style );
}


//----------------------------------------------------
// ユーティリティ
//----------------------------------------------------
function CreateTextObject(let mx, let my, let size, let text)
{
	let obj = ObjText_Create();
	ObjText_SetText(obj, text);
	ObjText_SetFontType(obj,"HGP明朝B");
	ObjText_SetFontBold(obj, false);
	ObjText_SetFontSize(obj, size);
	ObjText_SetFontColorTop(obj, 64, 64, 64);
	ObjText_SetFontColorBottom(obj, 64, 64, 64);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderColor(obj,0, 0, 0);
	ObjText_SetFontBorderWidth(obj, 2);
	Obj_SetRenderPriorityI(obj, 40);
	ObjRender_SetX(obj, mx);
	ObjRender_SetY(obj, my);
	return obj;
	
	Obj_Delete(obj);
}

