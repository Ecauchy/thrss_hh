//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage5　垂神通常01"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm05_setting.dnh"
	#include "./lib_enm05_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 100, false );
		ShotScore(enm);
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 90 ){
			Concentration03_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 190 ){
			ShotMain(enm);
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Normal" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 0, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, false, "EndSpellCard", true );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm05b(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		//　way数
		let way = 16;
		
		//　発射間隔
		let wtA = 75;
		let wtB = 0;

		//　速度
		let speed = [ 2, 1.4 ];
		let acc = 0;
		let mx = 10;

		let delay = 10;

		let lp = 4;
		
		//　ショット画像
		let shote	= [ BGW_WHITE_21, BGW_BLUE_21 ];
		alternative( GetDifficult )
		case( "Easy" ){
			way = 12;
		}
		case( "Normal" ){
		}
		case( "Hard" ){
			way = 20;
		}
		case( "Lunatic" ){
			way = 20;
			wtA = 36;
			lp = 6;
		}
		case( "OverDrive" ){
		}
		
		CallFamily( ID );
		SetAreaCommonData( "anime", "spa", false );
		
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];

		State;
		SetShot;
		task State{
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}
		
		task SetShot{
			loop{
				loop( lp ){
					let angle = GetAngleToPlayer(ID);
					let idx = 0;
					loop( way ){
						let sht = CreateShotA2( gpos[0], gpos[1], speed[idx%length(speed)], angle, acc, mx, shote[idx%length(shote)], delay );
						NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						angle += 360 / way;
						idx++;
					}
					ObjSound_Play( CreateShotSE[0] );
					if( Wait( wtA ) ){ return; }
				}
				if( Wait( wtB ) ){ return; }
				EnemyMove(enm, 2, 8 );
			}
		}
	}
	
	//　使い魔出現
	task CallFamily( ID ){
		let fam		= [
			CreateEnemy_Jewel( "BLUE", 0.2, 0, 2 ),
			CreateEnemy_Jewel( "ORANGE", 0.2, 180, 2 ),
		];

		let r = 1 - round( rand( 0, 1 ) ) * 2;
		ascent( idx in 0..length( fam ) ){
			SetFamily( fam[idx], idx, r );
			r = -r;
		}

		task SetFamily( obj, type, r ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			ObjMove_SetPosition( obj, gpos[0], gpos[1] );


			let way		= 4;
			let lp		= 36;
			let rag		= 360;

			let mx		= [ 2, 2.125 ];
			
			let ag		= 0;
			let agv		= 2;
			let wt		= 4;

			let shote	= [ BGW_BLUE_07, BGB_ORANGE_07 ];
			
			alternative( GetDifficult )
			case( "Easy" ){
				lp = 20;
				wt = 8;
				mx = [ 2 ];
			}
			case( "Normal" ){
			}
			case( "Hard" ){
				way = 3;
				lp = 36;
				mx = [ 2, 1.2 ];
			}
			case( "Lunatic" ){
				way = 6;
				lp = 16;
				mx = [ 3, 3.1 ];
				wt = 5;
				rag = 720;
				agv = 3;
			}

			let agp = rag / way / lp;
			if( type ){
				ascent( s in 0..length( mx ) ){
					mx[s] = mx[s] / 1.5;
				}
				wt *= 2;
				agp = agp*agv;
			}
		
			ObjMove_SetDestAtWeight( obj, gpos[0] + 128 * r, gpos[1] - 48, 16, 4 );
			
			Wait( 60 );
			ag = atan2( MaxY - ObjMove_GetY( obj ) , CenX - ObjMove_GetX( obj ) );
			loop{
				loop( lp ){
					let delay = 16;
					ascent( s in 0..length( mx ) ){
						let speed = mx[s]/4;
						let acc = mx[s]/60;
						let angle = ag;
						loop( way ){
							let v = 32;
							let sx = ObjMove_GetX( obj ) + v * cos( angle );
							let sy = ObjMove_GetY( obj ) + v * sin( angle );
							let sht = CreateShotA2( sx, sy, speed, angle, acc, mx[s], shote[ type%2 ], delay );
							NotifyEventAll( EV_USER + 40, [ sht, delay ] );
							angle += 360 / way;
						}
					}
					ObjSound_Play( CreateShotSE[1] );
					ag += agp * r;
					if( Wait( wt ) ){ return; }
				}
				
				JewelEffect( obj, [255,255,255], 4 );
				ObjSound_Play( CreateShotSE[7] );
				r = -r;
			}
		}
	}
