//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage8　五行「エレメンタルブラスト」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm08_setting.dnh"
	#include "./lib_enm08_effect.dnh"
	
	let enm;
	let spl;
	
	//　制限時間
	let SET_TIMER	= 69;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 96, 64, 96, 96 );

		MainThread;
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1500 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 8, 7 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm08a( enm, true, enemy_tex_path );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
/* to be translated */		let spell_text = "五行「エレメンタルブラスト」";
		
		SpellCounter( GetDifficult, 8, 7 );
		let sct = GetSpellCounter( GetDifficult, 8, 7 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, CHAR_CUTIN_MODE, enemy_cutin2_pos[0], enemy_cutin2_pos[1], [1,1], enemy_cutin_path2, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_08b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	
	task MainThread{
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
		
		Wait( 160 );
		SetEffect( enm, 7 );
		let gpos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		
		State;
		
		let lp = 0;
		while( !Obj_IsDeleted( enm ) ){
			Concentration03_Main( enm, power_rgb, 60 );
			if( Wait( 100 ) ){ return; }
			Pattern1( lp, r );
			if( Wait( 300 ) ){ return; }
			EnemyMove( enm, 2, 8 );
			if( Wait( 80 ) ){ return; }
			if( lp < 8 ){ lp++; }
			r = -r;
		}

		task Pattern1( lp, r ){
			let col = 0;
			
			let p = GetAngleToPlayer( enm );
			let wide = 0;
			loop( 8 ){
				if( wide == 0 ){
					SetLaser( p, 0, col );
				}else{
					let v = - wide / 2;
					loop( 2 ){
						SetLaser( p, v, col );
						v += wide;
					}
				}
				wide += 8+lp;
				col++;
				if( Wait( 3 ) ){ return; }
			}
			if( Wait( 5 ) ){ return; }

			local{
				let rad = 0;
				local{
					let sx = gpos[0];
					let sy = gpos[1];
					loop( 100 ){
						let v = 10;
						sx += v * cos( p );
						sy += v * sin( p );
						if( IsOut ){ break; }
						else{ rad += v; }
						function IsOut{
							let ans = false;
							let v=0;
							if( sx <= MinX - v ||
							    sx >= MaxX + v ||
							    sy <= MinY - v ||
							    sy >= MaxY + v ){ ans = true; }
							return ans;
						}
					}
				}
				
				let mpos = [ gpos[0] + rad * cos( p ), gpos[1] + rad * sin( p ) ];
				let ag = p + 180 - ( 30 + 4 * lp ) * r;
				let wide = 380;
				loop( 14 ){
					let speed = 8;
					/*
					let angle = p - wide / 2;
					loop( 2 ){
						HormingLaser( mpos, speed, angle );
						angle += wide;
					}
					wide += 12+lp*1.5;
					*/
					HormingLaser( mpos, speed, ag );
					ag += ( 4 + lp * 0.65 ) * r;
					if( Wait( 6 ) ){ return; }
				}
			}
			task HormingLaser( mpos, speed, angle ){
				ObjSound_Play( CreateShotSE[11] );
				let sx = gpos[0];
				let sy = gpos[1];
				let state = 0;
				let count = 0;
				let sbase = speed;
				let gra = ADD_BGW_WHITE_24;
				let del = 24;
				let size = 80;
				loop{
					loop( 5 ){
						let toAngle = atan2( mpos[1] - sy, mpos[0] - sx );
						
						let dangle = absolute( 8 - speed )/2;
						let dmax = 0;
						if( state > 0 ){ dangle = dmax; }
						let ret = toAngle - angle;
						if( ( ret > 0 && ret <= 180 ) || ( ret < 0 && ret <= -180 ) ){ angle += dangle; }
						else if( ( ret > 0 && ret > 180 ) || ( ret < 0 && ret > -180 ) ){ angle += -dangle; }
						if( angle >= 180 ){ angle += -360; }
						if( angle < -180 ){ angle += 360; }
						
						alternative( state )
						case( 0 ){
							if( speed > 0 ){ speed -= 0.075; }
							else{ 
								if( IsOut ){
									state = 1;
								}else{
									state = 2;
								}
							}
						}
						case( 1 ){
							speed += 0.02;
							if( !IsOut ){
								state = 2;
							}
							if( count >= 360 ){ return; }
						}
						case( 2 ){
							speed += 0.02;
						}
						
						let leng = size * ( speed / 3 );
						let width = size;
						SetLaserEffect( sx, sy, angle, leng, width, gra, 0, del );
						sx += speed * cos( angle );
						sy += speed * sin( angle );
						
						if( state == 2 && IsOut ){ break; }
						count++;
					}
					if( state == 2 && IsOut ){ break; }
					if( Wait( 1 ) ){ return; }
					function IsOut{
						let ans = false;
						let v=0;
						if( sx <= MinX - v ||
						    sx >= MaxX + v ||
						    sy <= MinY - v ||
						    sy >= MaxY + v ){ ans = true; }
						return ans;
					}
				}
				let p = angle;
				local{
					let way = 44;
					
					let speed = [ 1, 0.6 ];
					let angle = atan2( GetPlayerY - sy, GetPlayerX - sx );
					let shote = BGW_WHITE_12;
					let delay = 24;
					let s = 0;
					loop( way ){
						let sht = CreateShotA1( sx, sy, speed[s%length(speed)], angle, shote, delay );
						NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						s++;
						angle += 360 / way;
					}
				}
				ObjSound_Play( CreateShotSE[8] );
				
				task SetLaserEffect( let sx, let sy, let angle, let leng, let width, let gra, let delay, let del ){
					let obj = CreateStraightLaserA1( sx, sy, angle, leng, width, del, gra, delay );
					ObjStLaser_SetSource( obj, false );
					ObjShot_SetIntersectionEnable( obj, true );
					ObjRender_SetColor( obj, 64, 64, 64 );

					let l = leng;
					let w = width;
					let count = 0;
					while( !Obj_IsDeleted( obj ) ){
						ObjLaser_SetLength( obj, leng );
						ObjLaser_SetRenderWidth( obj, width );
						leng -= l / del;
						width -= w / del;
						if( count > del / 2 ){
							ObjShot_SetIntersectionEnable( obj, false );
						}
						if( count == del ){
							Obj_Delete( obj );
						}
						count++;
						yield;
					}
				}
			}
		}
		
		task State{
			while( !Obj_IsDeleted( enm ) ){
				gpos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
				yield;
			}
		}
		
		task SetLaser( let p, let v, let c ){
			let vp = v * 20;
			let angle = p + vp+v;
			let delay = 150;
			let del = 144;
			let color = [ [ 255, 0, 0 ],
						  [ 255, 100, 100 ],
						  [ 255, 255, 0 ],
						  [ 0, 255, 0 ],
						  [ 100, 100, 255 ],
						  [ 0, 0, 255 ],
						  [ 255, 0, 255 ],
						  [ 128, 128, 128 ]];
			let sht		= CreateSwordLaser( gpos, angle, 600, 148, del, color[ c%length( color ) ], delay );
			ObjSound_Play( CreateShotSE[1] );
			loop( delay ){
				let angle = p + vp+v;
				ObjStLaser_SetAngle( sht, angle );
				vp *= 0.95;
				if( Wait( 1 ) ){ return; }
			}
			ObjStLaser_SetAngle( sht, p+v );
			ObjSound_Play( CreateShotSE[13] );
		}
	}
	
