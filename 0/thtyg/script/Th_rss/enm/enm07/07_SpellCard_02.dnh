//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　二剣「夜刀神の流星光底」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 66;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1480 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 4 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07b( enm, true, enemy_tex_path );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
/* to be translated */			spell_text = "二剣「夜刀神の流星光底」";
		}
		others{
/* to be translated */			spell_text = "二剣「夜刀神の流星光底」";
		}
		
		SpellCounter( GetDifficult, 7, 4 );
		let sct = GetSpellCounter( GetDifficult, 7, 4 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[1], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let r = 1;
		let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		State;
		while( !Obj_IsDeleted(ID) ){
			Concentration03_Main( ID, power_rgb, 60 );
			if( Wait( 90 ) ){ break; }
			let p = GetAngleToPlayer( ID );
			CreateStarSword( ID, 192, [255,128,255], p + 180, 30, 60 );
			WorldShake_Single( 30, 4 );
			ObjSound_Play( CreateShotSE[8] );
			
			if( Wait( 30 ) ){ break; }
			
			CreateLaser01( ID, 12, r, true );
			
			if( Wait( 60 ) ){ break; }
			
			CreateStarSword( ID, 448, [255,128,255], p, 60, 90 );
			WorldShake_Single( 30, 4 );
			ObjSound_Play( CreateShotSE[8] );

			CreateLaser01( ID, 12, -r, false );
			
			if( Wait( 120 ) ){ break; }
			local{
				let roundway = 5;
				let wide = 18;
				let way = 5;
				let speed = 0.8;
				let ag = GetAngleToPlayer( ID );
				let shote = ADD_BGW_YELLOW_03;
				loop( roundway ){
					let angle = ag - wide / 2;
					loop( way ){
						CreateShotA2( gpos[0], gpos[1], speed * 2.5, angle, -speed / 8, speed, shote, 0 );
						angle += wide / ( way - 1 );
					}
					ag += 360 / roundway;
				}
				ObjSound_Play( CreateShotSE[ 1 ] );
			}
			EnemyMove( ID, 2, 8 );
			r = -r;
			
			yield;
		}

		task State{
			while( !Obj_IsDeleted( ID ) ){
				gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}
	}
	
	
	
	
	task CreateLaser01( ID, lp, r, type ){
		let color = [ 128, 255, 128 ];
		let shote = BGW_GREEN_09;
		if( r == -1 ){
			color = [ 128, 255, 255 ];
			shote = BGW_PURPLE_09;
		}
		let ag = 90 + rand( 100, 124 ) * r;
		ascent( let i in 0..lp ){
			if( Obj_IsDeleted(ID) ){ break; }
			let spos = [ CenX + 224 * r, MinY + i*(640/(lp-1)) ];
			
			CreateSwordLaser( spos, ag, 512, 16, 30, color, 60 );
			ObjSound_Play( CreateShotSE[13] );
			
			if( type ){
				let slp = 24;
				ascent( let j in 0..slp ){
					CreateShot01( spos, 4, ag + j*(360/slp), -0.1, rand(0.6,1.2), shote, 32 );
					ObjSound_Play( CreateShotSE[1] );
				}
			}
			
			Wait( 2 );
			
			yield;
		}
	}
	/*
	//　右から左
	task CreateLaser02( ID, lp, color, shote ){
		ascent( let i in 0..lp ){
			if( Obj_IsDeleted(ID) ){ break; }
			let spos = [ MaxX + 32, MinX + i*(640/(lp-1)) ];
			let ag = 180 + 32;
			
			CreateSwordLaser( spos, ag, 512, 16, 90, color, 60 );
			ObjSound_Play( CreateShotSE[13] );
			
			let slp = 32;
			ascent( let j in 0..slp ){
				CreateShot01( spos, 4, ag + j*(360/slp), -0.1, rand(0.6,1.2), shote, 32 );
				ObjSound_Play( CreateShotSE[1] );
			}
			
			Wait( 2 );
			
			yield;
		}
	}
	//*/
	task CreateStarSword( ID, dis, color, agb, delay, kill ){
		let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		ascent( let i in 0..5 ){
			let ag		= agb + i*72;
			let spos	= [ gpos[0] + dis * cos( ag ), gpos[1] + dis * sin( ag ) ];
			CreateSwordLaser( spos, ag+162, dis*2, 48, kill, color, delay );
		}
	}
