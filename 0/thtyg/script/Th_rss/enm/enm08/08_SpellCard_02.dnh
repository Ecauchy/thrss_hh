//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage8　二式「グレイテストソーマタージ」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm08_setting.dnh"
	#include "./lib_enm08_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 69;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 96, 64, 96, 96 );

		MainThread;
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1600 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 8, 4 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm08a( enm, true, enemy_tex_path );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
/* to be translated */		let spell_text = "二式「グレイテストソーマタージ」";
		
		SpellCounter( GetDifficult, 8, 4 );
		let sct = GetSpellCounter( GetDifficult, 8, 4 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, CHAR_CUTIN_MODE, enemy_cutin2_pos[0], enemy_cutin2_pos[1], [1,1], enemy_cutin_path2, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_08b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task MainThread{
		
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
		
		let gpos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		
		Wait( 160 );
		SetEffect( enm, 2 );
		while( !Obj_IsDeleted( enm ) ){
			Concentration03_Main( enm, power_rgb, 60 );
			if( Wait( 60 ) ){ return; }
			CreateStar( r );
			if( Wait( 720 ) ){ return; }
			EnemyMove( enm, 2, 8 );
			if( Wait( 120 ) ){ return; }
			r = -r;
		}
	}

	task CreateStar( r ){
		let pos = [ ObjMove_GetX(enm), ObjMove_GetY(enm) ];
		let color = [ 166, 255, 127 ];
		let g_ag = [ -90, -18, 54, 126, -162 ];
		let ag = [ 72, 144, -144, -72, 0 ];
		let dis = 144;
		let l_leng = dis*cos(18)*2;
		let rot = rand( 0, 360 );
		let rp = 0;
		let lobj = [];
		let delay = 0;
		let kill = 14400;
		let state = 0;
		
		ascent( idx in 0..5 ){
			let p = rot + g_ag[idx];
			let spos	= [ pos[0] + dis * cos( p ), pos[1] + dis * sin( p ) ];
			lobj = lobj~[ CreateSwordLaser( spos, rot+ag[idx], l_leng, 48, kill, color, delay ) ];
			ObjSound_Play( CreateShotSE[13] );
			if( Wait( 6 ) ){ return; }
		}
		
		State;
		if( Wait( 40 ) ){ return; }
		ObjSound_Play( CreateShotSE[ 5 ] );
		ShotPattern1;
		let rtmax = 2.5;
		let wt = 150;
		loop( wt ){
			
			if( rp < rtmax ){ rp += rtmax / wt; }
			if( Wait( 1 ) ){ return; }
		}
		Concentration03_Main( enm, power_rgb, 60 );
		if( Wait( 60 ) ){ return; }
		state = 1;
		Move;
		ObjSound_Play( CreateShotSE[ 10 ] );
		if( Wait( 300 ) ){ return; }
		ShotPattern2;
		loop( wt ){
			rp -= ( rtmax*2 ) / wt;
			if( Wait( 1 ) ){ return; }
		}
		Concentration03_Main( enm, power_rgb, 60 );
		loop( 60 ){
			rp -= ( rtmax*2 ) / wt;
			if( Wait( 1 ) ){ return; }
		}
		state = 2;
		MoveB;
		ObjSound_Play( CreateShotSE[ 10 ] );
		
		task ShotPattern1{
			if( Wait( 60 ) ){ return; }
			let srad = 30;
			let way = 20;
			let count = 0;
			loop( 5 ){

				let shote = BGW_YELLOW_12;
				let delay = 18;
				ascent( idx in 0..length( lobj ) ){
					let p = rot + g_ag[idx];
					let la = rot + ag[idx];
					let spos	= [ pos[0] + dis * cos( p ), pos[1] + dis * sin( p ) ];
					let leng = 0;
					while( leng <= l_leng ){
						let sx = spos[0] + leng * cos( la );
						let sy = spos[1] + leng * sin( la );
						let speed = GetDistance( [ sx, sy ], pos ) / srad;
						let angle = GetGapAngle( [ sx, sy ], pos ) + 180;

						let sht = CreateShotA1( sx, sy, speed, angle, shote, delay );
						NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						leng += l_leng / ( way - 1 );
					}
				}
				ObjSound_Play( CreateShotSE[ 1 ] );
				srad += 48;
				count++;
				if( Wait( 24 ) ){ return; }
				if( count == 4 ){
					if( Wait( 165 ) ){ return; }
					srad -= 24;
				}
			}
		}
		task ShotPattern2{
			if( Wait( 30 ) ){ return; }
			let srad = 80;
			loop( 2 ){
				loop( 5 ){
					let way = 14;
					let shote = BGW_GREEN_12;
					let delay = 18;
					ascent( idx in 0..length( lobj ) ){
						let p = rot + g_ag[idx];
						let la = rot + ag[idx];
						let spos	= [ pos[0] + dis * cos( p ), pos[1] + dis * sin( p ) ];
						let leng = 0;
						while( leng <= l_leng ){
							let sx = spos[0] + leng * cos( la );
							let sy = spos[1] + leng * sin( la );
							let speed = GetDistance( [ sx, sy ], pos ) / srad;
							let angle = GetGapAngle( [ sx, sy ], pos ) + 180;

							let sht = CreateShotA1( sx, sy, speed, angle, shote, delay );
							NotifyEventAll( EV_USER + 40, [ sht, delay ] );
							leng += l_leng / ( way - 1 );
						}
					}
					ObjSound_Play( CreateShotSE[ 1 ] );
					if( Wait( 2 ) ){ return; }
				}
				srad += 60;
				if( Wait( 60 ) ){ return; }
			}
		}

		task Move{
			let epos = pos;
			let bx = CenX;
			let by = CenY + 74;
			let p = GetGapAngle( [ bx, by ], pos );
			let radius = GetDistance( [ bx, by ], pos );
			let wt = 330;
			let mv = 0;
			loop( wt ){
				let angle = p + 370 * ( 1 * sin( mv ) ) * r;
				pos = [ bx + ( radius * 2 ) * cos( angle ), by + radius * sin( angle ) ];
				mv += 90 / wt;
				if( mv > 45 && GetDistance( pos, epos ) < 8 ){ break; }
				if( Wait( 1 ) ){ return; }
			}
		}
		task MoveB{
			let bx = pos[0];
			let by = pos[1];
			let p = GetAngleToPlayer( enm );
			let leng = 0;
			let lgp = 0.1;
			loop( 300 ){
				pos = [ bx + leng * cos( p ), by + leng * sin( p ) ];
				leng += lgp;
				lgp += 0.02;
				if( Wait( 1 ) ){ return; }
			}
			state = -1;
		}
		
		task State{
			while( state >= 0 ){
				if( state == 0 ){
					pos = [ ObjMove_GetX(enm), ObjMove_GetY(enm) ];
				}
				Set;
				rot -= rp * r;
				if( Wait( 1 ) ){ return; }
			}
			ascent( idx in 0..length( lobj ) ){
				Obj_Delete( lobj[ idx ] );
			}
		}
		task Set{
			ascent( idx in 0..length( lobj ) ){
				let p = rot + g_ag[idx];
				let spos	= [ pos[0] + dis * cos( p ), pos[1] + dis * sin( p ) ];
				ObjStLaser_SetAngle( lobj[ idx ], rot+ag[idx] );
				ObjMove_SetPosition( lobj[ idx ], spos[0], spos[1] );
			}
		}
	}
