////#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage3　光符「神光自在」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm03_setting.dnh"
	#include "./lib_IceShot.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 80, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip(64,64,64,64);
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			Concentration01_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain(enm);
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 3, 2 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay02(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
/* to be translated */			spell_text = "光符「神光自在」";
		}
		case( "Hard" ){
/* to be translated */			spell_text = "光条「ピナーカの斬残光」";
		}
		case( "Lunatic" ){
/* to be translated */			spell_text = "光条「大自在天槍」";
		}
		case( "OverDrive" ){
/* to be translated */			spell_text = "光条「大自在天槍」";
		}
		
		SpellCounter( GetDifficult, 3, 2 );
		let sct = GetSpellCounter( GetDifficult, 3, 2 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path2, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_03_R(ID);
		SpellCardMagicTimer(ID);
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let i		= 0;
		
		//　way数
		let lp		= [ 0, 0 ];
		//　レーザータイプ
		let type	= 0;
		//　レーザーカラー
		let rgb_array = [
			[64,64,255],	//　青
			[64,128,255],	//　深い水
			[64,192,255],	//　淡い青
			[64,255,255],	//　水
			[128,64,255],	//　青紫
			[192,64,255],	//　青紫
		];
		
		alternative( GetDifficult )
		case( "Easy" ){
			lp		= [ 3, 0 ];
		}
		case( "Normal" ){
			lp		= [ 5, 0 ];
		}
		case( "Hard" ){
			lp		= [ 5, 0 ];
		}
		case( "Lunatic" ){
			lp		= [ 7, 0 ];
		}
		case( "OverDrive" ){
			lp		= [ 7, 0 ];
		}
		
		while( !Obj_IsDeleted( ID ) ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			//　パワー溜め
			if( count == 300 ){
				Concentration01_Main(enm, power_rgb, 60 );
				EnemyMove(enm, 2, 8 );
				count = -60;
				frame = -60;
				type++;
			}
			
			if( frame == 0 ){
				LaserRain( ID, lp[0], type%2, rgb_array );
				SetAreaCommonData("anime", "spa", true );
			}
			
			if( frame == 180 ){
				SetAreaCommonData("anime", "spa", false );
			}
			
			count++;
			frame++;
			
			yield;
		}
	}
	
	task LaserRain( CallID, lp, type, rgb ){
		let angle = atan2( GetPlayerY - MinY, GetPlayerX - ObjMove_GetX( CallID ) );
		
		if( type == 0 ){ angle = angle - rand( 0, 32 ); }
		else{ angle = angle + rand( 0, 32 ); }
		
		ascent( let i in 0..(lp) ){
			if( Obj_IsDeleted(CallID) ){ break; }
			
			let pos = [
				CenX,
				MinY,
			];
			
			if( type == 0 ){
				pos[0] = MinX + i*(384/(lp-1));
			}
			else{
				pos[0] = MaxX - i*(384/(lp-1));
			}
			
			if( i == truncate(lp/2) ){
				CreateLaser_AngleToPlayer( CallID, pos, rgb[ truncate(i%6) ] );
			}
			else{
				CreateLaser( CallID, pos, angle, rgb[ truncate(i%6) ] );
			}
			
			ObjSound_Play( CreateShotSE[11] );
			
			loop(8){
				if( Obj_IsDeleted(CallID) ){ break; }
				yield;
			}
		}
	}
	
	task CreateLaser_AngleToPlayer( CallID, pos, rgb ){
		let angleToPlayer = atan2( GetPlayerY()-pos[1], GetPlayerX()-pos[0] );
		
		CreateStraightLaser01( CallID, pos, angleToPlayer, 640, 16, rgb, true, 100, 160 );
		CreateIceShot( CallID, pos, angleToPlayer, 0, 0.1, 10 );
	}
	
	task CreateLaser( CallID, pos, angle, rgb ){
		let wide = 64;
		alternative( GetDifficult )
		case( "Hard" ){ wide = 48; }
		case( "Lunatic" ){ wide = 48; }
		let ag = angle - wide / 2;
		ascent( let i in 0..3 ){
			CreateStraightLaser01( CallID, pos, ag, 640, 16, rgb, true, 100, 160 );
			CreateIceShot( CallID, pos, ag, 0, 0.1, 10 );
			ag += wide / 2;
		}
	}
	
	
	
	
	task CreateIceShot( CallID, pos, angle, speed, acc, mx ){
		let sht		= CreateShotA2( pos[0], pos[1], speed, angle, acc, mx, ADD_BGW_WHITE_02, 16 );
		NotifyEventAll( EV_USER + 40, [ sht, 16 ] );
		ShotChild( CallID, sht );
	}
	
	task ShotChild( CallID, ObjID ){
		let count	= 0;
		
		while( !Obj_IsDeleted(CallID) && !Obj_IsDeleted(ObjID) ){
			if( count > 0 && count%6 == 0 ){
				let dis = rand(0,8);
				let ang = rand(0,360);
				let spos = [
					ObjMove_GetX(ObjID) + dis * cos( ang ),
					ObjMove_GetY(ObjID) + dis * sin( ang ),
				];
				let sht2 = CreateShotA2( spos[0], spos[1], 0, ObjMove_GetAngle(ObjID)+180, 0, 0, ADD_BGW_WHITE_13, 8 );
				NotifyEventAll( EV_USER + 40, [ sht2, 8 ] );
				ShotDelete( CallID, sht2, 240 );
				ObjSound_Play( CreateShotSE[1] );
			}
			
			count++;
			
			yield;
		}
	}
	
	task ShotDelete( CallID, ObjID, long ){
		//　速度が 0 になるまで待機
		while( !Obj_IsDeleted(ObjID) && ObjMove_GetSpeed(ObjID) > 0 ){ yield; }
		//　氷結
		IceEffect( CallID, ObjID, rand(0.3,0.4) );
		//　削除まで long フレーム待機
		loop( long ){
			if( Obj_IsDeleted(ObjID) ){ break; }
			yield;
		}
		//　削除されていなければ
		if( !Obj_IsDeleted(CallID) && !Obj_IsDeleted(ObjID) ){
			let ang = 0;
			if( GetDifficult == "Hard" ){ ang = 180 + round( rand( -1, 1 ) ) * 16; }
			if( GetDifficult == "Lunatic" ){ ang = 180 + round( rand( -1, 1 ) ) * 32; }
			else if( GetDifficult == "OverDrive" ){ ang = rand(-64,64); }
			
			let sht = CreateShotA2( ObjMove_GetX(ObjID), ObjMove_GetY(ObjID), 0, ObjMove_GetAngle(ObjID) + ang, 0.01, 1.2, BGW_WHITE_13, 0 );
			NotifyEventAll( EV_USER + 40, [ sht, 0 ] );
		}
		Obj_Delete(ObjID);
	}
	
