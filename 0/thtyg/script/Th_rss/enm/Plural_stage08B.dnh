//#東方弾幕風[Plural]
#ScriptVersion[3]
#Title["桃源宮　stage8 用　連続スクリプト　静"]
#Text[""]
#Image[""]
#Background[""]
#BGM[""]
#System["script/Th_rss/system/System_Main.dnh"]
	
	let csd			= GetCurrentScriptDirectory();
	let objScene;
	let _objScene;
	let MinX		= 0;
	let MinY		= 0;
	let MaxX		= GetStgFrameWidth();
	let MaxY		= GetStgFrameHeight();
	let CenX		= GetStgFrameWidth()/2;
	let CenY		= GetStgFrameHeight()/2;

	let GetDifficult	= GetAreaCommonData("System", "Difficulty", "Normal" );
	
	//　Plural用の便利そうなやつ色々
	#include "./../lib/lib_Plural.dnh"
	//　各スペルカードSingleスクリプトへのパス
	#include "./SpellCardPath.dnh"

	#include "./../system/Load_AllTexture.dnh"
	#include "./../scene/ControlMusic.dnh"

	//　warning
	#include "./../lib/lib_warning_effect.dnh"
	
	@Initialize{
		objScene = ObjEnemyBossScene_Create();
		_objScene = ObjEnemyBossScene_Create();
		TPlural();
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		//LoadEnemyShotData( csd ~ "./../lib/lib_bullet_data.dnh" );
		//LoadEnemyShotData( csd ~ "./../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		yield;
	}
	
	@Finalize{ }
	
	task TPlural(){
		let EnemyNameIn = 0;
		if( GetDifficult == "OverDrive" ){

			ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_OverDrive.dnh" );
			
			//　別スレッドでロード（？）
			ObjEnemyBossScene_LoadInThread( objScene );
			
			//　ボス出撃OKまで待機
			while( !GetCommonData("RegistBoss", false ) ){ yield; }
			//　出撃フラグをfalseに
			SetCommonData("RegistBoss", false );
			StopMusic;
			SetWarningEffect( [ CenX, CenY ], 240 );
			loop( 180 ){ yield; }
			//　ボス出撃
			ObjEnemyBossScene_Regist( objScene );
			_PlayMusic();
			
			let AllBoss		= GetEnemyBossObjectID();
			
			//　左上 敵の名前表示
			EnemyNameDisplay(objScene, [128,192,255], 11, EnemyNameIn );
			//　敵の持ってるスペカ量
			ascent( let i in 0..ObjEnemyBossScene_GetInfo(objScene, INFO_REMAIN_STEP_COUNT ) ){
				EnemySpellDisplay(objScene, i );
			}
			
			let pos;
			
			//敵ボスシーンが終了するまで待機
			while( !Obj_IsDeleted(objScene) ){
				AllBoss = GetEnemyBossObjectID();
				if( length(AllBoss) > 0 ){
					pos = [ObjMove_GetX(AllBoss[0]),ObjMove_GetY(AllBoss[0])];
				}
				yield;
			}
			
			//　画面震動
			WorldShake( 60, 8 );
			
			//　引数2に座標をセット　ｲﾍﾞﾝﾄ側でその情報を取り出す
			NotifyEventAll( EV_USER + 1, pos );
			
			wait( 90 );				//　待機
			WorldShake( 60, 12 );	//　画面震動
			
			wait( 160 );		//　待機
			
			//スクリプト終了
			CloseScript( GetOwnScriptID() );
			
			task _PlayMusic(){
				NotifyEventAll( EV_USER + 2, [ 2, 3 ] );
				DeleteMusic();
				PlayMusic( 18, true, 0 );
			}
		}else{
			alternative( GetPlayerID() )
			case( "SRR_PL01A", "SRR_PL01B", "SRR_PL01C" ){
				ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_Event_befor_PL01.dnh" );
				EnemyNameIn = 4;
			}
			case( "SRR_PL02A", "SRR_PL02B", "SRR_PL02C" ){
				ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_Event_befor_PL02.dnh" );
				EnemyNameIn = 3;
			}
			case( "SRR_PL03A", "SRR_PL03B", "SRR_PL03C" ){
				ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_Event_befor_PL03.dnh" );
				EnemyNameIn = 5;
			}
			others{
				ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_Event_befor_PL01.dnh" );
			}
			
			ObjEnemyBossScene_Add(objScene, 0, csd ~ "./enm08/08_Normal_01.dnh" );
			ObjEnemyBossScene_Add(objScene, 0, SpellCardPath_stage08[3] );
			ObjEnemyBossScene_Add(objScene, 1, csd ~ "./enm08/08_Normal_02.dnh" );
			ObjEnemyBossScene_Add(objScene, 1, SpellCardPath_stage08[4] );
			ObjEnemyBossScene_Add(objScene, 2, csd ~ "./enm08/08_Normal_03.dnh" );
			ObjEnemyBossScene_Add(objScene, 2, SpellCardPath_stage08[5] );
			ObjEnemyBossScene_Add(objScene, 3, csd ~ "./enm08/08_Normal_04.dnh" );
			ObjEnemyBossScene_Add(objScene, 3, SpellCardPath_stage08[6] );
			ObjEnemyBossScene_Add(objScene, 4, csd ~ "./enm08/08_Normal_05.dnh" );
			ObjEnemyBossScene_Add(objScene, 4, SpellCardPath_stage08[7] );
			ObjEnemyBossScene_Add(objScene, 5, csd ~ "./enm08/08_Normal_06.dnh" );
			ObjEnemyBossScene_Add(objScene, 5, SpellCardPath_stage08[8] );
			ObjEnemyBossScene_Add(objScene, 6, csd ~ "./enm08/08_Normal_07.dnh" );
			ObjEnemyBossScene_Add(objScene, 6, SpellCardPath_stage08[9] );
			ObjEnemyBossScene_Add(objScene, 7, csd ~ "./enm08/08_Normal_08.dnh" );
			ObjEnemyBossScene_Add(objScene, 7, SpellCardPath_stage08[10] );
			ObjEnemyBossScene_Add(objScene, 8, SpellCardPath_stage08[11] );
			ObjEnemyBossScene_Add(objScene, 9, SpellCardPath_stage08[12] );
			ObjEnemyBossScene_Add(objScene, 10, SpellCardPath_stage08[13] );
			
			alternative( GetPlayerID() )
			case( "SRR_PL01A", "SRR_PL01B", "SRR_PL01C" ){
				ObjEnemyBossScene_Add(_objScene, 0, csd ~ "./enm08/08_Event_after_PL01.dnh" );
			}
			case( "SRR_PL02A", "SRR_PL02B", "SRR_PL02C" ){
				ObjEnemyBossScene_Add(_objScene, 0, csd ~ "./enm08/08_Event_after_PL02.dnh" );
			}
			case( "SRR_PL03A", "SRR_PL03B", "SRR_PL03C" ){
				ObjEnemyBossScene_Add(_objScene, 0, csd ~ "./enm08/08_Event_after_PL03.dnh" );
			}
			others{
				ObjEnemyBossScene_Add(_objScene, 0, csd ~ "./enm08/08_Event_after_PL01.dnh" );
			}
			
			//　別スレッドでロード（？）
			ObjEnemyBossScene_LoadInThread( objScene );
			ObjEnemyBossScene_LoadInThread( _objScene );
			//　ボス出撃OKまで待機
			while( !GetCommonData("RegistBoss", true ) ){ yield; }
			//　出撃フラグをfalseに
			SetCommonData("RegistBoss", false );
			//　ボス出撃
			ObjEnemyBossScene_Regist( objScene );
			
			let AllBoss		= GetEnemyBossObjectID();
			
			//　左上 敵の名前表示
			EnemyNameDisplay(objScene, [128,192,255], 11, EnemyNameIn );
			//　敵の持ってるスペカ量
			ascent( let i in 0..ObjEnemyBossScene_GetInfo(objScene, INFO_REMAIN_STEP_COUNT ) ){
				EnemySpellDisplay(objScene, i );
			}
			
			let pos;
			
			//敵ボスシーンが終了するまで待機
			while( !Obj_IsDeleted(objScene) ){
				AllBoss = GetEnemyBossObjectID();
				if( length(AllBoss) > 0 ){
					pos = [ObjMove_GetX(AllBoss[0]),ObjMove_GetY(AllBoss[0])];
				}
				yield;
			}
			
			//　画面震動
			WorldShake( 60, 8 );
			
			//　引数2に座標をセット　ｲﾍﾞﾝﾄ側でその情報を取り出す
			//　撃破エフェクトイベント
			NotifyEventAll( EV_USER + 1, pos );
			
			wait( 90 );				//　待機
			WorldShake( 60, 12 );	//　画面震動
			
			wait( 60 );			//　待機
			
			//　会話再生
			ObjEnemyBossScene_Regist( _objScene );
			
			while( !Obj_IsDeleted(_objScene) ){ yield; }
			
			wait( 120 );			//　2秒待機
			
			//スクリプト終了
			CloseScript( GetOwnScriptID() );
		}
	}
