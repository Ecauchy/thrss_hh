//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage8　「道成寺炎竜絵巻」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm08_setting.dnh"
	#include "./lib_enm08_effect.dnh"
	#include "./lib_enm08_family.dnh"
	
	let enm;
	let spl;
	
	//　制限時間
	let SET_TIMER	= 122;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 96, 64, 96, 96 );

		MainThread;
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 5000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 8, 12 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "Default" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm08a( enm, true, enemy_tex_path );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
/* to be translated */		let spell_text = "「道成寺炎竜絵巻」";
		
		SpellCounter( GetDifficult, 8, 12 );
		let sct = GetSpellCounter( GetDifficult, 8, 12 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, CHAR_CUTIN_MODE, enemy_cutin2_pos[0], enemy_cutin2_pos[1], [1,1], enemy_cutin_path2, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_08b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	function WaitP( long, ps ){
		loop( long ){
			yield;
			if( PHASE != ps ){ return true; }
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	let PHASE = 1;
	
	task MainThread{
		ObjMove_SetPosition( enm, CenX, MinY - 64 );
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
		
		let gpos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		
		State;
		
		Wait( 160 );
		SetEffect( enm, 0 );
		let way = 4;
		loop( 4 ){
			if( PHASE != 1 ){ break; }
			Concentration03_Main( enm, power_rgb, 60 );
			if( WaitP( 80, 1 ) ){ break; }
			local{
				let angle = GetAngleToPlayer( enm ) + 70 * r;
				HormingLaser( 2.5, angle, PHASE, r );
			}
			if( WaitP( 100, 1 ) ){ break; }
			local{
				let angle = GetAngleToPlayer( enm );
				loop( way ){
					Pattern1( 5, angle, r );
					angle += 360 / way;
				}
			}
			if( WaitP( 600, 1 ) ){ break; }
			EnemyMove( enm, 2, 8 );
			way++;
			r = -r;
		}
		PHASE = 2;
		Wait( 120 );
		while( !Obj_IsDeleted( enm ) ){
			Concentration03_Main( enm, power_rgb, 60 );
			if( Wait( 80 ) ){ return; }
			local{
				let angle = GetAngleToPlayer( enm ) + 70 * r;
				HormingLaser( 2.75, angle, PHASE, r );
			}
			if( Wait( 60 ) ){ return; }
			local{
				let p = rand( 0, 360 );
				let rad = 100;
				loop( 11 ){
					Pattern2( p, rad );
					ObjSound_Play( CreateShotSE[1] );
					p += 9.5 * r;
					rad -= 6;
					if( Wait( 42 ) ){ return; }
				}
			}
			if( Wait( 180 ) ){ return; }
			EnemyMove( enm, 2, 8 );
			r = -r;
		}
		
		task HormingLaser( speed, angle, ps, r ){
			ObjSound_Play( CreateShotSE[13] );
			let sx = gpos[0];
			let sy = gpos[1];
			let state = 0;
			let count = 0;
			let sbase = speed;
			let gra = ADD_BGW_RED_27;
			let del = 96;
			let size = 80;
			loop{
				loop( 2 ){
					let toAngle = atan2( GetPlayerY - sy, GetPlayerX - sx );
					
					let dangle = absolute( 8 - speed ) / 4.75;
					let dmax = 0;
					if( state > 0 ){ dangle = dmax; }
					let ret = toAngle - angle;
					if( ( ret > 0 && ret <= 180 ) || ( ret < 0 && ret <= -180 ) ){ angle += dangle; }
					else if( ( ret > 0 && ret > 180 ) || ( ret < 0 && ret > -180 ) ){ angle += -dangle; }
					if( angle >= 180 ){ angle += -360; }
					if( angle < -180 ){ angle += 360; }
					
					alternative( state )
					case( 0 ){
						speed = sbase + ( sbase / 2 ) * sin( count * 2 );
						if( count > 1420 ){ state = 1; }
					}
					case( 1 ){
						speed += 0.08;
					}
					
					let leng = size * ( speed / 3 );
					let width = size;
					if( count % 2 ){
						SetLaserEffect( sx, sy, angle, leng, width, gra, 0, del/2, 0 );
					}
					sx += speed * cos( angle );
					sy += speed * sin( angle );

					if( count > 90 ){
						if( count % 4 == 0 ){
							Set( sx, sy, angle );
							task Set( let sx, let sy, let angle ){
								loop( 3 ){
									let wide = 60;
									let way = 3;
									let p = angle + rand( 70, 110 ) * r;
									let spd = 4;
									let shote = ADD_BGW_RED_27;
									let delay = 10;
									let ag = p - wide / 2;
									loop( way ){
										let sht = CreateShotA2( sx, sy, 0, ag, spd / 160, spd, shote, delay );
										NotifyEventAll( EV_USER + 40, [ sht, delay ] );
										ag += wide / ( way - 1 );
									}
									ObjSound_Play( CreateShotSE[ 1 ] );
									if( WaitP( 10, ps ) ){ return; }
								}
							}

							if( ps == 2 && count % 16 == 0 ){
								let ag = angle - rand( 70, 110 ) * r;
								let spd = 1;
								let shote = ADD_BGW_PURPLE_27;
								let delay = 10;
								let sht = CreateShotA2( sx, sy, 0, ag, spd / 160, spd, shote, delay );
								NotifyEventAll( EV_USER + 40, [ sht, delay ] );
							}
						}
					}
					
					if( state == 1 && IsOut ){ break; }
					count++;
				}
				if( state == 1 && IsOut ){ break; }
				if( WaitP( 1, ps ) ){ return; }
				function IsOut{
					let ans = false;
					let v=64;
					if( sx <= MinX - v ||
					    sx >= MaxX + v ||
					    sy <= MinY - v ||
					    sy >= MaxY + v ){ ans = true; }
					return ans;
				}
			}
			
			task SetLaserEffect( let sx, let sy, let angle, let leng, let width, let gra, let delay, let del, let type ){
				let obj = CreateStraightLaserA1( sx, sy, angle, leng, width, del, gra, delay );
				ObjStLaser_SetSource( obj, false );
				ObjShot_SetIntersectionEnable( obj, true );
				if( type ){
					let color = 96;
					ObjRender_SetColor( obj, color, color, color );
					ObjRender_SetBlendType( obj, BLEND_SUBTRACT );
					ObjShot_SetIntersectionEnable( obj, true );
				}
				let l = leng;
				let w = width;
				let count = 0;
				while( !Obj_IsDeleted( obj ) ){
					ObjLaser_SetLength( obj, leng );
					ObjLaser_SetRenderWidth( obj, width );
					leng -= l / del;
					width -= w / del;
					if( count > del / 3 ){
						ObjShot_SetIntersectionEnable( obj, false );
					}
					if( count == del ){
						Obj_Delete( obj );
					}
					count++;
					yield;
				}
			}
		}
		
		task State{
			while( !Obj_IsDeleted( enm ) ){
				gpos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
				let life = ObjEnemy_GetInfo( enm, INFO_LIFE );
				alternative( PHASE )
				case( 1 ){
					if( life < 2600 ){
						DeleteShotAll( TYPE_SHOT, TYPE_ITEM );
						PHASE = 2;
					}
				}
				yield;
			}
		}
	}

	task Pattern1( speed, angle, r ){
		ObjSound_Play( CreateShotSE[13] );
		let state = 0;
		let obj = CreateEnemy_Sikigami( 50, 0, true, false );
		let pos = [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
		ObjMove_SetPosition( obj, pos[0], pos[1] );
		State;
		Move;
		WaitP( 60, 1 );
		Set;
		WaitP( 460, 1 );
		if( !Obj_IsDeleted( obj ) && PHASE == 1 ){
			ObjSound_Play( CreateShotSE[ 3 ] );
			let shote = BGW_RED_27;
			let way = 18;
			let rd = 4;
			let speed = [ 2, 1 ];
			let angle = GetAngleToPlayer( obj );
			loop( way ){
				let v = 24;
				let spos = [ pos[0] + v * cos( angle ), pos[1] + v * sin( angle ) ];
				ascent( a in 0..length( speed ) ){
					CreateShot01( spos, 0, angle + round(rand(-1,1))*rd, speed[a] / 120, speed[a], shote, 16 );
				}
				angle += 360 / way;
			}
		}
		Obj_Delete( obj );

		task Set{
			if( WaitP( 1, 1 ) ){ return; }
			while( !Obj_IsDeleted( obj ) ){
				let p = angle;
				loop( 8 ){
					let way = 2;
					let wide = 70;
					let speed = 2;
					let shote = BGB_RED_08;
					let delay = 10;
					let ag = p - wide / 2;
					loop( way ){
						let sht = CreateShotA2( pos[0], pos[1], 0, ag, speed / 90, speed, shote, delay );
						NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						ag += wide / ( way - 1 );
					}
					ObjSound_Play( CreateShotSE[ 1 ] );
					p += -1 * r;
					if( WaitP( 2, 1 ) ){ return; }
				}
				if( WaitP( 24, 1 ) ){ return; }
			}
		}

		task Move{

			let count = 0;
			while( !Obj_IsDeleted( obj ) ){
				let toAngle = atan2( ObjMove_GetY( enm ) - pos[1], ObjMove_GetX( enm ) - pos[0] );
				
				let dangle = absolute( 6 - speed ) / 2;
				let dmax = 0.5;
				if( dangle > dmax ){ dangle = dmax; }
				let ret = toAngle - angle;
				if( ( ret > 0 && ret <= 180 ) || ( ret < 0 && ret <= -180 ) ){ angle += dangle; }
				else if( ( ret > 0 && ret > 180 ) || ( ret < 0 && ret > -180 ) ){ angle += -dangle; }
				if( angle >= 180 ){ angle += -360; }
				if( angle < -180 ){ angle += 360; }

				alternative( state )
				case( 0 ){
					if( count < 10 ){
						angle += 1 * r;
					}
					speed /= 1.04;
					if( speed <= 0.05 ){ state = 1; }
				}
				case( 1 ){
					speed = 0.5 + 0.5 * sin( count * 2 );
					count++;
				}

				ObjMove_SetX( obj, pos[0] + speed * cos( angle ) );
				ObjMove_SetY( obj, pos[1] + speed * sin( angle ) );
				ObjMove_SetAngle( obj, angle );
				yield;
			}
		}

		task State{
			while( !Obj_IsDeleted( obj ) ){
				pos = [ ObjMove_GetX( obj ), ObjMove_GetY( obj ) ];
				yield;
			}
		}
	}
	

	task Pattern2( p, radius ){
		let sx = ObjMove_GetX( enm );
		let sy = ObjMove_GetY( enm );
		let way = 6;
		let col = 0;
		let angle = p;
		loop( way ){
			Set( radius, angle, col );
			angle += 360 / way;
			col++;
		}
		task Set( radius, p, col ){
			let bx = sx + radius * cos( p );
			let by = sy + radius * sin( p );
			let ag = p + 120;
			let way = 7;
			let shote = BGW_RED_12;
			let delay = 16;
			let leng = 0;
			loop( way ){
				let tx = bx + leng * cos( ag );
				let ty = by + leng * sin( ag );
				let speed = GetDistance( [ sx, sy ], [ tx, ty ] ) / 70;
				let angle = GetGapAngle( [ sx, sy ], [ tx, ty ] );
				CreateShot01( [ sx, sy ], speed * 3, angle, -speed / 10, speed, shote, delay );
				leng += radius / ( way - 1 );
			}
		}
	}
	
