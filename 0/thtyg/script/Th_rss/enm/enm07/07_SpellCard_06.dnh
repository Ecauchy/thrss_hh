//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　六剣「桃姫解放祝いの御箸」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 66;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 96, 96, 96, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1800 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 8 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07b( enm, true, enemy_tex_path );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
/* to be translated */			spell_text = "六剣「桃姫解放祝いの御箸」";
		}
		others{
/* to be translated */			spell_text = "六剣「桃姫解放祝いの御箸」";
		}
		
		SpellCounter( GetDifficult, 7, 8 );
		let sct = GetSpellCounter( GetDifficult, 7, 8 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[1], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		Concentration03_Main( ID, power_rgb, 60 );
		Wait( 100 );
		
		let f = 0;
		let c = 0;
		while( !Obj_IsDeleted(ID) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			let shote = [ ADD_BGW_BLUE_17, ADD_BGW_GREEN_17 ];
			let angle = rand( 0, 360 );
			let way = 8;
			loop( way ){
				CreateShotWall( ID, 172, [ angle , angle+(360/way) ], 1.4, 0, 10, shote[c%2], 0 );
				CreateShotWall( ID, 172, [ angle+(360/way)/2, angle+(360/way)*1.5 ], 1.4, 0, 10, shote[1-c%2], 180 );
				angle += 360 / way;
			}
			
			
			if( Wait( 120 ) ){ return; }
			
			Shot01( gpos, f+1, angle );
			EnemyMove( ID, 2, 8 );
			if( Wait( 50 ) ){ return; }
			c++;
			if( f < 12 ){ f+=2; }
		}
	}
	
	task Shot01( gpos, lp, agc ){
		let speed = 6;
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		let i = 0;
		ascent( let j in 0..lp ){
			if( Obj_IsDeleted(enm) ){ break; }
			let angle = agc + i * r;
			let way = 8;
			loop( way ){
				let obj = CreateShot01( gpos, speed, angle, 0, 10, BGW_WHITE_17, 0 );
				angle += 360 / way;
			}
			ObjSound_Play( CreateShotSE[0] );
			speed /= 1.01;
			i += 1;
			r = -r;
			if( Wait(4) ){ break; }
			yield;
		}
	}
	
	//　壁
	task CreateShotWall( ID, dist, angle, speed, acc, mx, shote, agc ){
		let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		let sposA = [
			gpos[0] + dist * cos( angle[0] ),
			gpos[1] + dist * sin( angle[0] ),
		];
		let sposB = [
			gpos[0] + dist * cos( angle[1] ),
			gpos[1] + dist * sin( angle[1] ),
		];
		let agb = GetGapAngle( sposA, sposB );
		CreateShotAtoB( ID, sposA, sposB, 12, speed, agb-90, agc, acc, mx, shote );
	}
	
	//　posAからposBの間にlp個の弾を配置する
	task CreateShotAtoB( ID, posA, posB, lp, speed, angle, agc, acc, mx, shote ){
		let distb	= GetDistance( posA, posB );
		let agb		= GetGapAngle( posA, posB );

		let base	= 192;
		let v		= 36;
		let posC	= [ ObjMove_GetX( ID ) + ( base + v ) * cos( angle ),
		                ObjMove_GetY( ID ) + ( base + v ) * sin( angle ) ];
		if( agc ){
			posC	= [ ObjMove_GetX( ID ) + ( base - v*6 ) * cos( angle ),
			            ObjMove_GetY( ID ) + ( base - v*6 ) * sin( angle ) ];
		}
		ObjSound_Play( CreateShotSE[13] );
		CreateSwordLaser( posA, agb, distb, 16, 24, [255,255,255], 30 );
		if( Wait( 36 ) ){ return; }
		ascent( let i in 0..lp ){
			let spos = [
				posA[0] + i*(distb/(lp-1)) * cos( agb ),
				posA[1] + i*(distb/(lp-1)) * sin( agb ),
			];
			let ag = GetGapAngle( spos, posC );
			speed = GetDistance( spos, posC ) / 120;
			CreateShot01( spos, speed, ag, acc, mx, shote, 8 );
		}
		ObjSound_Play( CreateShotSE[1] );
	}
	
	task Laser01( ID, lp, dis, color, agb, delay, kill ){
		let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		ascent( let i in 0..lp ){
			let ag		= agb + i*(360/lp);
			let spos	= [ gpos[0] + dis * cos( ag ), gpos[1] + dis * sin( ag ) ];
			CreateSwordLaser( spos, agb, 512, 16, kill, color, delay );
		}
	}
